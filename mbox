#!/bin/sh

mbox_help() {
  cat << EOF
Usage: $0 command

Common commands:
   help            shows this help

   init            bootstrap: installs puppet, r10k, and puppet modules
   setup [cluster] install, configure and start MapR
   up    [cluster] init + setup

   start           start mapr-zookeeper and then mapr-warden
   stop            stop mapr-warden and then mapr-zookeeper
   restart         stop + start

   delmapr         remove mapr packages and /opt/mapr
   delpuppet       remove puppet

   clean           stop + delmapr
   cleanall        stop + delmapr + delpuppet
EOF
}

# The base dir of mbox
BASE_DIR=$(dirname $(readlink -f $0))
# The dir to download external (i.e., 3rd party) puppet modules
EXTERNAL=$BASE_DIR/external

mbox_init() {
	# install puppet repo
	if rpm -qa | grep puppet5-release >/dev/null; then
		echo "puppet5-release already installed"
	else
		sudo rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
	fi

	# install puppet agent
	if rpm -qa | grep puppet-agent >/dev/null; then
		echo "puppet-agent already installed"
	else
		sudo yum install -y puppet-agent
	fi

	# install r10k from Ruby Gems
	if /opt/puppetlabs/puppet/bin/gem list | grep r10k >/dev/null; then
		echo "puppet gem r10k already installed"
	else
		sudo /opt/puppetlabs/puppet/bin/gem install r10k
	fi

	# download external puppet modules
	if ls $EXTERNAL/stdlib >/dev/null 2>&1; then
		echo "puppet modules stdlib etc. already installed"
	else
		sudo /opt/puppetlabs/puppet/bin/r10k puppetfile install --puppetfile $BASE_DIR/Puppetfile --moduledir $EXTERNAL
	fi
}

mbox_setup() {
	# set cluster fact if given, the fact is used in heira.yaml
	cluster=$1
	if [ ! -z $cluster ]; then
		export FACTER_cluster=$cluster
	fi

	### update package_version.py based on mep version and os.family
	# get mep version
	mep_version=
	# get mep version from cluster's yaml file
	if [ ! -z $cluster ]; then
		mep_version=`grep ^profile::mapr::repo::mep_version $BASE_DIR/hieradata/clusters/$cluster.yaml | awk '{print $NF}'`
	fi
	# if not found, get mep version from common.yaml
	if [ -z $mep_version ]; then
		mep_version=`grep ^profile::mapr::repo::mep_version $BASE_DIR/hieradata/common.yaml | awk '{print $NF}'`
	fi
	if [ -z "$mep_version" ]; then
		echo Error: mep_version not found.
		exit 1
	fi
	# get os.family
	os_family=`/opt/puppetlabs/bin/facter os.family | tr [:upper:] [:lower:]`
	if [ -z "$os_family" ]; then
		echo Error: os_family not found.
		exit 1
	fi

	# update package_version.py
	fact_file=$BASE_DIR/modules/profile/facts.d/package_version.py
	sed -e "s/MEP_VERSION/$mep_version/g" -e "s/OS_FAMILY/$os_family/g" $fact_file > /tmp/package_version.py
	cat /tmp/package_version.py > $fact_file


	### add fqdn to /etc/hosts
	dnsdomain=
	# get dns domain from cluster's yaml file
	if [ ! -z $cluster ]; then
		dnsdomain=`grep ^profile::mapr::prereq::domain $BASE_DIR/hieradata/clusters/$cluster.yaml | awk '{print $NF}'`
	fi
	# if not found, get dns domain from common.yaml
	if [ -z $dnsdomain ]; then
		dnsdomain=`grep ^profile::mapr::prereq::domain $BASE_DIR/hieradata/common.yaml | awk '{print $NF}'`
	fi

	if ! grep -q `hostname`.$dnsdomain /etc/hosts; then
		echo `hostname -I` `hostname`.$dnsdomain `hostname` >> /etc/hosts
	fi

	# run puppet apply
	ENVIRON=production
	# adding prefix 'FACTER_' to make $base_dir available in puppet manifests
	# using 'sudo -E' to preserve env variables
	export FACTER_base_dir=$BASE_DIR
	sudo -E /opt/puppetlabs/bin/puppet apply --show_diff --graph \
		--modulepath $BASE_DIR/modules:$EXTERNAL \
		--hiera_config $BASE_DIR/hiera.yaml \
		--environmentpath=$BASE_DIR/environments \
		--environment=$ENVIRON \
		$BASE_DIR/environments/$ENVIRON/manifests/default.pp
}

mbox_start() {
	sudo systemctl daemon-reload
	sudo systemctl start mapr-zookeeper && sudo systemctl start mapr-warden
}

mbox_stop() {
	sudo systemctl daemon-reload
	sudo systemctl stop mapr-warden && sudo systemctl stop mapr-zookeeper
}

mbox_restart() {
	mbox_stop && mbox_start
}

mbox_delmapr() {
	sudo yum erase -y mapr-\*
	sudo rm -fr /opt/mapr
}

mbox_delpuppet() {
	sudo yum erase -y puppet-agent puppet5-release
	sudo rm -fr /opt/puppetlabs
}

mbox_up() {
	mbox_init && mbox_setup $1
}

mbox_clean() {
	mbox_stop
	mbox_delmapr
}

mbox_cleanall() {
	mbox_clean
	mbox_delpuppet
}


mbox_ldir() {
	declare -a dir_array=(`ls -d /opt/mapr/*/*-*/{logs,conf,etc/hadoop,desktop/conf} 2>/dev/null`)

	for ((i=0; i<${#dir_array[@]}; i++)); do
		printf "%2d = %s\n" $i ${dir_array[$i]}
	done

	#read -p "Select dir: " i
}

##### ##### main ##### #####

if [ $# -eq 0 ]; then
	mbox_help
	exit 1
fi

commandList=(help init setup up start stop restart delmapr delpuppet clean cleanall ldir)
command=$1
shift
if [[ " ${commandList[*]} " == *" $command "* ]]; then
    mbox_$command $@
else
	echo Error: invalid command: $command
	echo
	mbox_help
fi
