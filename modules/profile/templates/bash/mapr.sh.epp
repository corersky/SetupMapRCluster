# Add base_dir to the path for sh compatible users
# Note: base_dir is a puppet fact which is passed over via 'mc setup'

if ! echo $PATH | grep -q <%= $::base_dir %> ; then
  export PATH=$PATH:<%= $::base_dir %>
fi

# function fd(): find directory 
function fd() {
    app=$1  # app name, e.g., hadoop, hive, spark, etc.
    type=$2 # dir type, e.g., conf|cfg, log|logs

    if [ -z "$app" ]; then
        echo "Usage: fd <app> [conf|log|bin|...]"
        echo "Options:"
        echo "    app: hadoop, hive, spark, etc."
        echo "    dir: conf|cfg, log|logs, bin, etc."
        return 1
    fi

    MAPR_HOME=/opt/mapr

    app_home=
    dir=

    if [ $app == 'mapr' ]; then
        # when app == 'mapr'
        app_home=$MAPR_HOME
    else
        # find app if only first few letters are given
        if [ $(find $MAPR_HOME -maxdepth 1 -type d -name "$app*" | wc -l) -eq 1 ]; then
            app=$(basename $(find $MAPR_HOME -maxdepth 1 -type d -name "$app*"))
        fi

        # check app under /opt/mapr
        if [ ! -e ${MAPR_HOME}/$app ]; then
            echo "No such app: $app, not installed here?"
            return 1
        fi

        ver_file=${MAPR_HOME}/$app/${app}version
        if [ -e $ver_file ]; then
            ver=$(cat $ver_file)
            app_ver=${app}-${ver}
        else
            app_ver=$(ls -v ${MAPR_HOME}/$app | grep "${app}-" | tail -1 )
        fi

        app_home=$MAPR_HOME/$app/${app_ver}
    fi

    if [ ! -e "$app_home" ]; then
        echo "Directory \'$app_home\' not found"
        return 1
    fi

    if [ -z "$type" ]; then
        echo $app_home
        return 0
    fi


    dir=
    case $type in
        log|logs)
            if [ -d $app_home/logs ]; then
                dir=$app_home/logs
            elif [ -d $app_home/log ]; then
                dir=$app_home/log
            elif [ -d $app_home/var/log/$app ]; then
                dir=$app_home/var/log/$app
            elif [ -d $app_home/var/log ]; then
                dir=$app_home/var/log
            fi
            ;;
        conf|cfg)
            if [ -d $app_home/conf ]; then
                dir=$app_home/conf
            elif [ -d $app_home/cfg ]; then
                dir=$app_home/etc/cfg
            elif [ -d $app_home/config ]; then
                dir=$app_home/etc/config
            elif [ -d $app_home/etc/$app ]; then
                dir=$app_home/etc/$app
            elif [ -d $app_home/etc/conf ]; then
                dir=$app_home/etc/conf
            elif [ -d $app_home/desktop/conf ]; then
                dir=$app_home/desktop/conf
            fi
            ;;
        *)
            if [ -d $app_home/$type ]; then
                dir=$app_home/$type
            fi
    esac

    if [ -z $dir ]; then
        # No such directory, go to app home instead
        dir=$app_home
    fi

     echo $dir
     return 0
}

# function sd(): switch directory
function sd() {
    if dir=`fd $@`; then
        echo "Entering into: $dir"
        cd $dir
    else
        printf "$dir\n"
    fi

}

# function catxml(): print only names and values from hadoop xml config files
function catxml() {
    if [ -z "$1" ]; then
        echo "Usage: catxml <hadoop xml conf file>"
        return
    fi

    xmlfile=$1
    cat $xmlfile | grep -E "name|value" | sed ':a;N;$!ba;s|</name>\n\s*<value>|=|g' | sed -E 's|\s*<name>(.*)</value>|\1;|g'
}